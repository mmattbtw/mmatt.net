---
export interface Props {
  title: string;
  disableScribbles?: boolean
  disableHeaderOnScroll?: boolean
}

const { title, disableScribbles, disableHeaderOnScroll } = Astro.props as Props;
import Header from "../components/Header";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="dark:bg-black dark:text-white bg-white text-black">
    <Header
      client:load
      disableHeaderOnScroll={disableHeaderOnScroll ?? false}
      links={[
        {
          href: "/",
          title: "Home",
        },
        {
          href: "/stream",
          title: "Stream",
        },
      ]}
    />
    <slot />
    { !disableScribbles && (
    <canvas
      id="canvas"
      style={{
        width: "100%",
        height: "100%",
        display: "absolute",
        position: "fixed",
        top: 0,
        left: 0,
        zIndex: -9999,
      }}
      class="dark:stroke-white stroke-black"></canvas>
    <script is:inline>
      window.addEventListener("load", () => {
        resize();
        const mq = window.matchMedia("(prefers-color-scheme: dark)");
        document.addEventListener("mousemove", sketch);
        window.addEventListener("resize", resize);
      });
      const canvas = document.querySelector("#canvas");
      const ctx = canvas.getContext("2d");

      function resize() {
        ctx.canvas.width = window.innerWidth;
        ctx.canvas.height = window.innerHeight;
      }
      let coord = { x: 0, y: 0 };
      let paint = true;
      function getPosition(event) {
        coord.x = event.clientX - canvas.offsetLeft;
        coord.y = event.clientY - canvas.offsetTop;
      }
      function startPainting(event) {
        paint = true;
        getPosition(event);
      }
      function stopPainting() {
        paint = false;
      }
      function sketch(event) {
        if (!paint) return;
        ctx.beginPath();
        ctx.lineWidth = 0.5;
        ctx.lineCap = "round";
        ctx.strokeStyle = "white";
        ctx.moveTo(coord.x, coord.y);
        getPosition(event);
        ctx.lineTo(coord.x, coord.y);
        ctx.stroke();
      }
    </script>
    <button
      onclick="{
      var x = document.getElementById('canvas');
        if (x) {
            if (x.style.display === 'none') {
                x.style.display = 'block';
            } else {
                x.style.display = 'none';
            }
        } else {
            return;
        }
      }"
      style={{
        bottom: 0,
        right: 0,
        marginRight: "10px",
        marginBottom: "10px",
        opacity: 0.75,
      }}
      class="hidden dark:flex dark:fixed transition-all p-1 rounded dark:bg-neutral-800 hover:dark:bg-neutral-700 bg-neutral-300 hover:bg-neutral-200"
    >
      Toggle Scribbles
    </button>
  )}
    <style>
      html {
        font-family: system-ui, sans-serif;
      }

      :global(code) {
        font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
          DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
      }
    </style>

    <!-- social.lol verification code -->
    <a rel="me" href="https://social.lol/@mm"></a>
  </body>
</html>
